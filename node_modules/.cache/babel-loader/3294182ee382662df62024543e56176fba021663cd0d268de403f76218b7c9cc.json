{"ast":null,"code":"const {\n  QueueSystem,\n  SECTION_NAMES\n} = require(\"../../queue-project.js\");\nconst {\n  Select,\n  Input\n} = require(\"enquirer\");\nconst FILE_PATH = \"./queueData.json\";\nasync function selectSection() {\n  const sectionPrompt = new Select({\n    name: \"section\",\n    message: \"Select a section\",\n    choices: [...SECTION_NAMES]\n  });\n  return await sectionPrompt.run();\n}\nasync function mainMenu() {\n  const prompt = new Select({\n    name: \"Queue\",\n    message: \"Select an option\",\n    choices: [\"Request Ticket\", \"Request Priority Ticket\", \"Show Queue\", \"Call Next\", \"Average Wait Time\", \"Show Called Tickets\", \"Empty Queue\", \"Exit\"]\n  });\n  const answer = await prompt.run();\n  if (answer === \"Exit\") {\n    console.log(\"Goodbye!\");\n    return \"Exit\";\n  }\n  let queue = QueueSystem.loadQueue(FILE_PATH);\n  if ([\"Request Ticket\", \"Request Priority Ticket\"].includes(answer)) {\n    const userNamePrompt = new Input({\n      message: \"Enter your name\",\n      initial: queue.user || \"\"\n    });\n    const userName = await userNamePrompt.run();\n    queue.user = userName;\n    if (!userName) {\n      console.log(\"Please enter a name\");\n      return;\n    }\n    const section = await selectSection();\n    const isPriority = answer === \"Request Priority Ticket\";\n    console.log(queue.requestTicket(section, isPriority));\n  }\n  if (answer === \"Show Queue\") {\n    const section = await selectSection();\n    console.log(`${section} queue: ${JSON.stringify(queue.showQueue(section), null, 2)}`);\n  }\n  if (answer === \"Call Next\") {\n    const section = await selectSection();\n    console.log(queue.callNextTicket(section));\n  }\n  if (answer === \"Average Wait Time\") {\n    const averageWaitTimes = queue.averageWaitTimeForAll();\n    console.log(\"The average wait time for each ticket is:\");\n    for (const [section, waitTime] of Object.entries(averageWaitTimes)) {\n      console.log(`  - ${section}: ${waitTime.toFixed(2)} minutes`);\n    }\n  }\n  if (answer === \"Empty Queue\") {\n    queue.emptyQueue();\n    console.log(\"Queue has been emptied\");\n  }\n  if (answer === \"Show Called Tickets\") {\n    console.log(`Last tickets called: ${JSON.stringify(queue.showLastCalledTickets(), null, 2)}`);\n  }\n  QueueSystem.saveQueue(queue, FILE_PATH);\n}\n(async () => {\n  let code;\n  do {\n    code = await mainMenu();\n  } while (code !== \"Exit\");\n})();","map":{"version":3,"names":["QueueSystem","SECTION_NAMES","require","Select","Input","FILE_PATH","selectSection","sectionPrompt","name","message","choices","run","mainMenu","prompt","answer","console","log","queue","loadQueue","includes","userNamePrompt","initial","user","userName","section","isPriority","requestTicket","JSON","stringify","showQueue","callNextTicket","averageWaitTimes","averageWaitTimeForAll","waitTime","Object","entries","toFixed","emptyQueue","showLastCalledTickets","saveQueue","code"],"sources":["/home/lucas/workspace/teste/objects.js/queue-system-frontend/src/index.js"],"sourcesContent":["const { QueueSystem, SECTION_NAMES } = require(\"../../queue-project.js\");\nconst { Select, Input } = require(\"enquirer\");\n\nconst FILE_PATH = \"./queueData.json\";\n\nasync function selectSection() {\n  const sectionPrompt = new Select({\n    name: \"section\",\n    message: \"Select a section\",\n    choices: [...SECTION_NAMES],\n  });\n  return await sectionPrompt.run();\n}\n\nasync function mainMenu() {\n  const prompt = new Select({\n    name: \"Queue\",\n    message: \"Select an option\",\n    choices: [\n      \"Request Ticket\",\n      \"Request Priority Ticket\",\n      \"Show Queue\",\n      \"Call Next\",\n      \"Average Wait Time\",\n      \"Show Called Tickets\",\n      \"Empty Queue\",\n      \"Exit\",\n    ],\n  });\n\n  const answer = await prompt.run();\n\n  if (answer === \"Exit\") {\n    console.log(\"Goodbye!\");\n    return \"Exit\";\n  }\n\n  let queue = QueueSystem.loadQueue(FILE_PATH);\n\n  if ([\"Request Ticket\", \"Request Priority Ticket\"].includes(answer)) {\n    const userNamePrompt = new Input({\n      message: \"Enter your name\",\n      initial: queue.user || \"\",\n    });\n    const userName = await userNamePrompt.run();\n    queue.user = userName;\n    if (!userName) {\n      console.log(\"Please enter a name\");\n      return;\n    }\n\n\n\n    const section = await selectSection();\n    const isPriority = answer === \"Request Priority Ticket\";\n    console.log(queue.requestTicket(section, isPriority));\n  }\n\n  if (answer === \"Show Queue\") {\n    const section = await selectSection();\n    console.log(\n      `${section} queue: ${JSON.stringify(queue.showQueue(section), null, 2)}`\n    );\n  }\n\n  if (answer === \"Call Next\") {\n    const section = await selectSection();\n    console.log(queue.callNextTicket(section));\n  }\n\n  if (answer === \"Average Wait Time\") {\n    const averageWaitTimes = queue.averageWaitTimeForAll();\n\n    console.log(\"The average wait time for each ticket is:\");\n    for (const [section, waitTime] of Object.entries(averageWaitTimes)) {\n      console.log(`  - ${section}: ${waitTime.toFixed(2)} minutes`);\n    }\n  }\n\n  if (answer === \"Empty Queue\") {\n    queue.emptyQueue();\n    console.log(\"Queue has been emptied\");\n  }\n\n  if (answer === \"Show Called Tickets\") {\n    console.log(\n      `Last tickets called: ${JSON.stringify(\n        queue.showLastCalledTickets(),\n        null,\n        2\n      )}`\n    );\n  }\n\n  QueueSystem.saveQueue(queue, FILE_PATH);\n}\n\n(async () => {\n  let code;\n  do {\n    code = await mainMenu();\n  } while (code !== \"Exit\");\n})();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}